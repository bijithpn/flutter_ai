// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_ai_mvp/test/integration/pose_detection_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_ai_mvp/models/models.dart' as _i4;
import 'package:flutter_ai_mvp/services/pose_detection_service.dart' as _i2;
import 'package:flutter_ai_mvp/services/storage_repository.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PoseDetectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPoseDetectionService extends _i1.Mock
    implements _i2.PoseDetectionService {
  MockPoseDetectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.PoseData> get poseStream => (super.noSuchMethod(
        Invocation.getter(#poseStream),
        returnValue: _i3.Stream<_i4.PoseData>.empty(),
      ) as _i3.Stream<_i4.PoseData>);

  @override
  bool get isDetecting => (super.noSuchMethod(
        Invocation.getter(#isDetecting),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> startDetection() => (super.noSuchMethod(
        Invocation.method(
          #startDetection,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> stopDetection() => (super.noSuchMethod(
        Invocation.method(
          #stopDetection,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [StorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageRepository<T> extends _i1.Mock
    implements _i5.StorageRepository<T> {
  MockStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> save(
    String? key,
    T? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            key,
            data,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T?> load(String? key) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [key],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<T>> loadAll() => (super.noSuchMethod(
        Invocation.method(
          #loadAll,
          [],
        ),
        returnValue: _i3.Future<List<T>>.value(<T>[]),
      ) as _i3.Future<List<T>>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> exists(String? key) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
