// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_ai_mvp/test/integration/recipe_generation_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_ai_mvp/services/ai_service.dart' as _i2;
import 'package:flutter_ai_mvp/services/ai_service_manager.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAIService_0 extends _i1.SmartFake implements _i2.AIService {
  _FakeAIService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AIServiceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIServiceManager extends _i1.Mock implements _i3.AIServiceManager {
  MockAIServiceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AIService get currentService => (super.noSuchMethod(
        Invocation.getter(#currentService),
        returnValue: _FakeAIService_0(
          this,
          Invocation.getter(#currentService),
        ),
      ) as _i2.AIService);

  @override
  bool get isServiceAvailable => (super.noSuchMethod(
        Invocation.getter(#isServiceAvailable),
        returnValue: false,
      ) as bool);

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<bool> get connectivityStream => (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Future<void> initialize({String? openAIApiKey}) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#openAIApiKey: openAIApiKey},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setOfflineService(_i2.AIService? offlineService) => super.noSuchMethod(
        Invocation.method(
          #setOfflineService,
          [offlineService],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String> generateRecipe(List<String>? ingredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRecipe,
          [ingredients],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateRecipe,
            [ingredients],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> summarizeText(String? text) => (super.noSuchMethod(
        Invocation.method(
          #summarizeText,
          [text],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #summarizeText,
            [text],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> updateOpenAIApiKey(String? apiKey) => (super.noSuchMethod(
        Invocation.method(
          #updateOpenAIApiKey,
          [apiKey],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
