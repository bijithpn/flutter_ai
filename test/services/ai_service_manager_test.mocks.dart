// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_ai_mvp/test/services/ai_service_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_ai_mvp/services/connectivity_service.dart' as _i2;
import 'package:flutter_ai_mvp/services/openai_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i2.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<bool> get connectivityStream => (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OpenAIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenAIService extends _i1.Mock implements _i4.OpenAIService {
  MockOpenAIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize(String? apiKey) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [apiKey],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> loadApiKey() => (super.noSuchMethod(
        Invocation.method(
          #loadApiKey,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> generateRecipe(List<String>? ingredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateRecipe,
          [ingredients],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateRecipe,
            [ingredients],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> summarizeText(String? text) => (super.noSuchMethod(
        Invocation.method(
          #summarizeText,
          [text],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #summarizeText,
            [text],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
